{
    "run_name": "Wav2Vec-fine-tuning-example",
    "run_description": "Fine tuning example",

    // AUDIO PARAMS
    "sampling_rate": 16000,

    // DATA AUGMENTATION 
    // ToDo: Implement Time mask and 
    "gpu_audio_augmentation":{
        "gain":{
            "mode":"per_example",
            "min_gain_in_db": -18.0,
            "max_gain_in_db": 6,
            "p": 0.0 // propability of apply this method, 0 is disable
        },
        // additive noise and room impulse response (RIR) simulation similar to: https://arxiv.org/pdf/2009.14153.pdf
        "additive":{
            "background_paths":"../../datasets/musan/", // download: https://www.openslr.org/17/
            "mode": "per_batch", // per_batch because load one wav file is slow, so we can use the same wav file but with differents min/max_snr_in_db
            "min_snr_in_db": 5.0,
            "max_snr_in_db": 20.0,
            "sample_rate": 16000,
            "p": 0.0
        },
        // rir filter proposed by: https://ieeexplore.ieee.org/document/7953152
        "rir":{
            "ir_paths": "../../datasets/RIRS_NOISES/simulated_rirs/", // download: https://www.openslr.org/28/
            "mode": "per_batch",
            "convolve_mode": "full",
            "sample_rate": 16000,
            "p": 0.0
        }
        
    },

    // VOCABULARY PARAMETERS
    "vocab":{
        "vocab_path": "example/vocab_example.json", // generic vocab for Portuguese
        "blank": "<pad>", // blank token for padding
        "silence": "|", // token between words
        "unk": "<unk>" // unk token
    },

    // TRAINING
    "batch_size": 16,       // Batch size for training.
    "mixed_precision": true,     // level of optimization with NVIDIA's apex feature for automatic mixed FP16/FP32 precision (AMP), NOTE: currently only O1 is supported, and use "O1" to activate.
    "early_stop_epochs": 20, // If 0 disabled else Number of epochs for stop training with validation loss dont decrease 

    // OPTIMIZER
    "epochs": 1000,                // total number of epochs to train.
    "lr": 0.0003,                  // Initial learning rate.
    // ToDo: implement linear warm up
    "lr_scheduler": "ExponentialLR",   // one of the schedulers from https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
    "lr_scheduler_params": {
       "gamma": 0.999,
        "last_epoch": -1
    },

    // LOGGING
    "print_step": 50, //  Number of steps to log in console.
    "plot_step": 100,    // Number of steps to plot.

    // DATA LOADING
    "num_loader_workers": 8,        // number of training data loader processes. Don't set it too big. 4-8 are goo
    
    // MODEL
    "freeze_feature_extractor": true, // Whether to freeze the feature extractor layers of the model.
    "attention_dropout": 0.1, // The dropout ratio for the attention probabilities.
    "activation_dropout": 0.1, // The dropout ratio for activations inside the fully connected layer.
    "hidden_dropout": 0.1, // The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.
    "feat_proj_dropout": 0.1, // The dropout probabilitiy for all 1D convolutional layers in feature extractor.
    "mask_time_prob": 0.1, //  Propability of each feature vector along the time axis to be chosen as the start of the vector span to be masked.
    "layerdrop": 0.1,  // The LayerDrop probability.
    "gradient_checkpointing": true,  // If True, use gradient checkpointing to save memory at the expense of slower backward pass.

    // PATHS
    "output_path": "../checkpoints/Wav2Vec/Fine-tuning/PT-CommonVoice-test/",

    // DATASETS
    "datasets":{
        "train":
            [
               // this dicts is pass directly for the load dataset see the documentation: https://huggingface.co/docs/datasets/package_reference/loading_methods.html#datasets.load_dataset 
            {
                "path": "common_voice",
                "name": "pt",
                "split": "train+validation",
                "text_column": "sentence", // column that contain the texts one for dataset
                "path_column": "path" // columns that contain the audio paths one for dataset
            }
            //{
            //    "name": "csv",
            //    "path": "",
            //    "data_files": ["metadata.csv"], // csv files
            //    "text_column": "sentence",
            //    "audio_column": "path"
            //}
            ]
        ,
        "devel":
            [ 
                {
                    "path": "common_voice",
                    "name": "pt",
                    "split": "test",
                    "text_column": "sentence", // column that contain the texts one for dataset
                    "path_column": "path" // columns that contain the audio paths one for dataset
                }
        
            ] 
            ,
        "test":
                {
                    "path": "common_voice",
                    "name": "pt",
                    "split": "test",
                    "text_column": "sentence", // column that contain the texts one for dataset
                    "path_column": "path" // columns that contain the audio paths one for dataset
                }       
    
    },
    // used only for test 
    "KenLM":{
        "kenlm_model_path": "../../kenLM/binaries/subtitle/4-gram/lm.binary", // Path for KenLM model
        "lexicon_path": "example/lexicon.lst", // vocab file to limit the decoder search
        "beam": 2048, 
        "nbest": 1,
        "beam_threshold": 25, 
        "lm_weight": 1, 
        "word_score": -1,
        "sil_weight": 0
    }


}

